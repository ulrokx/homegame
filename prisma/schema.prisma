// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("POSTGRES_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    player        Player    @relation(fields: [playerEmail], references: [email])
    playerEmail   String    @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// players can exist from their email address alone, can be linked to a User
model Player {
    email      String       @id
    games      PlayerStat[]
    ownedGames Game[]
    user       User?
}

model Game {
    id           String       @id @default(cuid())
    name         String
    description  String
    defaultBuyIn Decimal      @default(0) @db.Decimal(10, 2)
    openInvite   Boolean      @default(true) 
    status       GameStatus   @default(PENDING)
    date         DateTime
    location     String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    players      PlayerStat[]
    owner        Player       @relation(fields: [ownerEmail], references: [email])
    ownerEmail   String
    deleted   Boolean  @default(false)

    @@index([name])
}

model PlayerStat {
    player      Player         @relation(fields: [playerEmail], references: [email])
    playerEmail String
    game        Game           @relation(fields: [gameId], references: [id])
    gameId      String
    accepted    AcceptedStatus @default(PENDING)
    buyIn       Decimal        @default(0) @db.Decimal(10, 2)
    stack       Decimal        @default(0) @db.Decimal(10, 2)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    deleted   Boolean  @default(false)

    @@id([playerEmail, gameId])
}

enum AcceptedStatus {
    YES
    NO
    MAYBE
    PENDING
}

enum GameStatus {
    PENDING
    IN_PROGRESS
    FINISHED
}
